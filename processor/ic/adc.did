type CurrencyPair = record {
  base : text;
  quote : text;
  price : opt float64;
  sources : opt vec float64;
  repr : text;
};

type PriceResponse = record {
  id : text;
  owner : principal;
  pairs : vec CurrencyPair;
  processed : bool;
};

type ErrorResponse = record {
  id : text;
  owner : principal;
  message : text;
};

type ResponseResult = variant {
  ok : PriceResponse;
  err : ErrorResponse;
};

type PriceOpts = record {
  price : bool;
};

type Headers = record {
  key : text;
  value : text;
};


type ResponseV2 = record {
  id : text;
  owner : principal;
  proof_requests : vec text;
  contents : vec text;
  processed : bool;
};

type ADCResponseV2 = variant {
  ok : ResponseV2;
  err : ErrorResponse;
};

service : {
  "name" : () -> (text) query;
  
  // whitelist operations
  "add_to_whitelist" : (canister_principal : principal) -> ();
  "remove_from_whitelist" : (canister_principal : principal) -> ();
  "is_canister_whitelisted" : (canister_principal : principal) -> (bool) query;

  // price request/response operations
  "request_data" : (comma_seperated_pairs : text, opts : PriceOpts) -> (text);
  "receive_orchestrator_response" : (price_response : ResponseResult) -> ();

  // state variables getter and setter
  "get_verifier_canister" : () -> (opt principal) query;
  "set_verifier_canister" : (manager_verifier_canister : principal) -> ();

  // request data from URL
  "request_data_url" : (target_url : text, method: text, redacted : text, headers : vec Headers, body : text) -> (text);

  // receive orchestrator data
  "receive_orchestrator_data" : (response : ADCResponseV2, notary_pubkey : text) -> ();
};
