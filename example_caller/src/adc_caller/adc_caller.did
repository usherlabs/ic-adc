type ProofTypes = variant {
  Pyth : text;
  Redstone : text;
};

type Token = record {
  ticker : text;
  proofs : opt vec ProofTypes;
};

type CurrencyPair = record {
  base : Token;
  quote : opt Token;
  error : opt text;
  price : opt float64;
  repr : text;
};

type ADCResponse = record {
  id : text;
  owner : principal;
  pairs : vec CurrencyPair;
  processed : bool;
};

type ErrorResponse = record {
  id : text;
  owner : principal;
  message : text;
};

type ResponseResult = variant {
  ok : ADCResponse;
  err : ErrorResponse;
};

type ResponseV2 = record {
  id: text;
  owner: principal;
  proof_requests: vec text;
  contents: vec text;
  processed: bool;
};

type ResponseResultV2 = variant {
  ok: ResponseV2;
  err: ErrorResponse;
};


service : {
  "set_adc_address": (principal) -> ();
  "get_adc_address": () -> (opt principal);
  "set_transaction_fee": (nat) -> ();
  "get_transaction_fee": () -> (nat);
  "submit_adc_request" : (text) -> (text);
  "receive_adc_response" : (ResponseResult) -> ();
  "receive_adc_response_v2": (ResponseResultV2) -> ();
};
